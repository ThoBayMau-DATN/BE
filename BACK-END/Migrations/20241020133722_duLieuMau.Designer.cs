// <auto-generated />
using System;
using BACK_END.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BACK_END.Migrations
{
    [DbContext(typeof(BACK_ENDContext))]
    [Migration("20241020133722_duLieuMau")]
    partial class duLieuMau
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BACK_END.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.HasIndex("TicketId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("BACK_END.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Electric")
                        .HasColumnType("int");

                    b.Property<int>("Other")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Water")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("BACK_END.Models.Motel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("Acreage")
                        .HasColumnType("tinyint");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpriryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Motel");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Acreage = (byte)0,
                            Address = "123 Đường Biển, Quận 1, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6418),
                            Location = "10.762622, 106.660172",
                            Name = "Tro A",
                            Status = (byte)1,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1002,
                            Acreage = (byte)0,
                            Address = "456 Đường Sông, Quận 2, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6425),
                            Location = "10.762623, 106.660173",
                            Name = "Tro B",
                            Status = (byte)0,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1003,
                            Acreage = (byte)0,
                            Address = "789 Đường Núi, Quận 3, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6428),
                            Location = "10.762624, 106.660174",
                            Name = "Tro C",
                            Status = (byte)1,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1004,
                            Acreage = (byte)0,
                            Address = "101 Đường Biển, Quận 4, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6429),
                            Location = "10.762625, 106.660175",
                            Name = "Tro D",
                            Status = (byte)1,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1005,
                            Acreage = (byte)0,
                            Address = "202 Đường Mặt Trăng, Quận 5, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6430),
                            Location = "10.762626, 106.660176",
                            Name = "Tro E",
                            Status = (byte)0,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1006,
                            Acreage = (byte)0,
                            Address = "303 Đường Bình Yên, Quận 6, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6431),
                            Location = "10.762627, 106.660177",
                            Name = "Tro f",
                            Status = (byte)1,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1007,
                            Acreage = (byte)0,
                            Address = "404 Đường Hồng Hà, Quận 7, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6433),
                            Location = "10.762628, 106.660178",
                            Name = "Tro g",
                            Status = (byte)1,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1008,
                            Acreage = (byte)0,
                            Address = "505 Đường Biển Xanh, Quận 8, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6434),
                            Location = "10.762629, 106.660179",
                            Name = "Tro H",
                            Status = (byte)0,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1009,
                            Acreage = (byte)0,
                            Address = "606 Đường Núi Ngàn, Quận 9, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6435),
                            Location = "10.762630, 106.660180",
                            Name = "Tro I",
                            Status = (byte)1,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1010,
                            Acreage = (byte)0,
                            Address = "707 Đường An Bình, Quận 10, TP. HCM",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6436),
                            Location = "10.762631, 106.660181",
                            Name = "Tro j",
                            Status = (byte)1,
                            UserId = 1001
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BACK_END.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Electric")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<int>("Other")
                        .HasColumnType("int");

                    b.Property<int>("Water")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.ToTable("Price");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Electric = 3000,
                            IsActive = true,
                            MotelId = 1001,
                            Other = 1000,
                            Water = 5000
                        },
                        new
                        {
                            Id = 1002,
                            Electric = 3500,
                            IsActive = true,
                            MotelId = 1002,
                            Other = 1500,
                            Water = 6000
                        },
                        new
                        {
                            Id = 1003,
                            Electric = 3200,
                            IsActive = false,
                            MotelId = 1003,
                            Other = 1200,
                            Water = 5500
                        },
                        new
                        {
                            Id = 1004,
                            Electric = 3400,
                            IsActive = true,
                            MotelId = 1004,
                            Other = 1300,
                            Water = 6200
                        },
                        new
                        {
                            Id = 1005,
                            Electric = 3100,
                            IsActive = false,
                            MotelId = 1005,
                            Other = 1400,
                            Water = 5800
                        },
                        new
                        {
                            Id = 1006,
                            Electric = 3600,
                            IsActive = true,
                            MotelId = 1006,
                            Other = 1600,
                            Water = 6100
                        },
                        new
                        {
                            Id = 1007,
                            Electric = 3300,
                            IsActive = true,
                            MotelId = 1007,
                            Other = 1100,
                            Water = 5700
                        },
                        new
                        {
                            Id = 1008,
                            Electric = 3400,
                            IsActive = false,
                            MotelId = 1008,
                            Other = 1700,
                            Water = 5900
                        },
                        new
                        {
                            Id = 1009,
                            Electric = 3200,
                            IsActive = true,
                            MotelId = 1009,
                            Other = 1800,
                            Water = 5600
                        },
                        new
                        {
                            Id = 1010,
                            Electric = 3500,
                            IsActive = true,
                            MotelId = 1010,
                            Other = 1900,
                            Water = 6000
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("BACK_END.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            MotelId = 1001,
                            Price = 500000,
                            RoomNumber = 101,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1002,
                            MotelId = 1002,
                            Price = 600000,
                            RoomNumber = 102,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 1003,
                            MotelId = 1003,
                            Price = 700000,
                            RoomNumber = 103,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1004,
                            MotelId = 1004,
                            Price = 800000,
                            RoomNumber = 104,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1005,
                            MotelId = 1005,
                            Price = 900000,
                            RoomNumber = 105,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 1006,
                            MotelId = 1006,
                            Price = 1000000,
                            RoomNumber = 106,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1007,
                            MotelId = 1007,
                            Price = 1100000,
                            RoomNumber = 107,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1008,
                            MotelId = 1008,
                            Price = 1200000,
                            RoomNumber = 108,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 1009,
                            MotelId = 1009,
                            Price = 1300000,
                            RoomNumber = 109,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1010,
                            MotelId = 1010,
                            Price = 1400000,
                            RoomNumber = 110,
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("BACK_END.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("BACK_END.Models.Ticket_Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Ticket_Log");
                });

            modelBuilder.Entity("BACK_END.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Avatar = "avatar1.png",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6240),
                            Email = "vana@example.com",
                            FullName = "Nguyễn Văn A",
                            Phone = "0901234567",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1002,
                            Avatar = "avatar2.png",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6243),
                            Email = "thib@example.com",
                            FullName = "Trần Thị B",
                            Phone = "0902345678",
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1003,
                            Avatar = "avatar3.png",
                            CreateDate = new DateTime(2024, 10, 20, 20, 37, 21, 513, DateTimeKind.Local).AddTicks(6245),
                            Email = "vanc@example.com",
                            FullName = "Lê Văn C",
                            Phone = "0903456789",
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("BACK_END.Models.User_Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Notification");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BACK_END.Models.Image", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany("Images")
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("Motel");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BACK_END.Models.Invoice", b =>
                {
                    b.HasOne("BACK_END.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BACK_END.Models.Motel", b =>
                {
                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany("Motels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Price", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");
                });

            modelBuilder.Entity("BACK_END.Models.Review", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Room", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany("Rooms")
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");
                });

            modelBuilder.Entity("BACK_END.Models.Term", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");
                });

            modelBuilder.Entity("BACK_END.Models.Ticket", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Ticket_Log", b =>
                {
                    b.HasOne("BACK_END.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BACK_END.Models.User", b =>
                {
                    b.HasOne("BACK_END.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BACK_END.Models.User_Notification", b =>
                {
                    b.HasOne("BACK_END.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BACK_END.Models.Motel", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("BACK_END.Models.User", b =>
                {
                    b.Navigation("Motels");
                });
#pragma warning restore 612, 618
        }
    }
}
