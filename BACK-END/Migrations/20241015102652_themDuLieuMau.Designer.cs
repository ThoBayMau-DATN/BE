// <auto-generated />
using System;
using BACK_END.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BACK_END.Migrations
{
    [DbContext(typeof(BACK_ENDContext))]
    [Migration("20241015102652_themDuLieuMau")]
    partial class themDuLieuMau
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BACK_END.Models.Consumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Electric")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Water")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Consumption");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Electric = 120.5m,
                            RoomId = 1001,
                            Time = new DateTime(2024, 10, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(340),
                            Water = 50.25m
                        },
                        new
                        {
                            Id = 1002,
                            Electric = 110.75m,
                            RoomId = 1002,
                            Time = new DateTime(2024, 9, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(341),
                            Water = 40m
                        },
                        new
                        {
                            Id = 1003,
                            Electric = 130m,
                            RoomId = 1003,
                            Time = new DateTime(2024, 8, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(349),
                            Water = 60.3m
                        },
                        new
                        {
                            Id = 1004,
                            Electric = 115.25m,
                            RoomId = 1004,
                            Time = new DateTime(2024, 7, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(351),
                            Water = 55.5m
                        },
                        new
                        {
                            Id = 1005,
                            Electric = 125.75m,
                            RoomId = 1005,
                            Time = new DateTime(2024, 6, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(352),
                            Water = 52.75m
                        },
                        new
                        {
                            Id = 1006,
                            Electric = 118.6m,
                            RoomId = 1006,
                            Time = new DateTime(2024, 5, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(355),
                            Water = 58m
                        },
                        new
                        {
                            Id = 1007,
                            Electric = 122.4m,
                            RoomId = 1007,
                            Time = new DateTime(2024, 4, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(356),
                            Water = 61.1m
                        },
                        new
                        {
                            Id = 1008,
                            Electric = 119.9m,
                            RoomId = 1008,
                            Time = new DateTime(2024, 3, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(358),
                            Water = 53.6m
                        },
                        new
                        {
                            Id = 1009,
                            Electric = 121.5m,
                            RoomId = 1009,
                            Time = new DateTime(2024, 2, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(359),
                            Water = 56.8m
                        },
                        new
                        {
                            Id = 1010,
                            Electric = 123.75m,
                            RoomId = 1010,
                            Time = new DateTime(2024, 1, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(360),
                            Water = 59.25m
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("BACK_END.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int?>("MotelId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("MotelId");

                    b.HasIndex("TicketId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("BACK_END.Models.Motel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<byte>("TotalRoom")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.ToTable("Motel");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Address = "123 Đường Biển, Quận 1, TP. HCM",
                            Location = "10.762622, 106.660172",
                            Name = "Tro A",
                            Status = (byte)1,
                            TermId = 1001,
                            TotalRoom = (byte)20,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1002,
                            Address = "456 Đường Sông, Quận 2, TP. HCM",
                            Location = "10.762623, 106.660173",
                            Name = "Tro B",
                            Status = (byte)0,
                            TermId = 1002,
                            TotalRoom = (byte)15,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1003,
                            Address = "789 Đường Núi, Quận 3, TP. HCM",
                            Location = "10.762624, 106.660174",
                            Name = "Tro C",
                            Status = (byte)1,
                            TermId = 1001,
                            TotalRoom = (byte)30,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1004,
                            Address = "101 Đường Biển, Quận 4, TP. HCM",
                            Location = "10.762625, 106.660175",
                            Name = "Tro D",
                            Status = (byte)1,
                            TermId = 1002,
                            TotalRoom = (byte)18,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1005,
                            Address = "202 Đường Mặt Trăng, Quận 5, TP. HCM",
                            Location = "10.762626, 106.660176",
                            Name = "Tro E",
                            Status = (byte)0,
                            TermId = 1001,
                            TotalRoom = (byte)12,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1006,
                            Address = "303 Đường Bình Yên, Quận 6, TP. HCM",
                            Location = "10.762627, 106.660177",
                            Name = "Tro f",
                            Status = (byte)1,
                            TermId = 1002,
                            TotalRoom = (byte)25,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1007,
                            Address = "404 Đường Hồng Hà, Quận 7, TP. HCM",
                            Location = "10.762628, 106.660178",
                            Name = "Tro g",
                            Status = (byte)1,
                            TermId = 1001,
                            TotalRoom = (byte)16,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1008,
                            Address = "505 Đường Biển Xanh, Quận 8, TP. HCM",
                            Location = "10.762629, 106.660179",
                            Name = "Tro H",
                            Status = (byte)0,
                            TermId = 1002,
                            TotalRoom = (byte)20,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1009,
                            Address = "606 Đường Núi Ngàn, Quận 9, TP. HCM",
                            Location = "10.762630, 106.660180",
                            Name = "Tro I",
                            Status = (byte)1,
                            TermId = 1001,
                            TotalRoom = (byte)22,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1010,
                            Address = "707 Đường An Bình, Quận 10, TP. HCM",
                            Location = "10.762631, 106.660181",
                            Name = "Tro j",
                            Status = (byte)1,
                            TermId = 1002,
                            TotalRoom = (byte)30,
                            UserId = 1001
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Content = "Hệ thống sẽ bảo trì vào lúc 22h tối nay.",
                            Status = (byte)1,
                            Title = "Cập nhật hệ thống",
                            Type = "Thông báo khẩn cấp",
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1002,
                            Content = "Bạn có thông báo mới từ ban quản lý.",
                            Status = (byte)0,
                            Title = "Tin nhắn từ ban quản lý",
                            Type = "Tin nhắn mới",
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1003,
                            Content = "Bạn còn nợ tiền thuê phòng tháng này.",
                            Status = (byte)1,
                            Title = "Nhắc nhở thanh toán",
                            Type = "Nhắc nhở",
                            UserId = 1003
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Electric")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Other")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Water")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MotelId")
                        .IsUnique();

                    b.ToTable("Price");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Electric = 3000.75m,
                            IsActive = true,
                            MotelId = 1001,
                            Other = 1000.2m,
                            Water = 5000.5m
                        },
                        new
                        {
                            Id = 1002,
                            Electric = 3500.5m,
                            IsActive = true,
                            MotelId = 1002,
                            Other = 1500.3m,
                            Water = 6000.25m
                        },
                        new
                        {
                            Id = 1003,
                            Electric = 3200m,
                            IsActive = false,
                            MotelId = 1003,
                            Other = 1200m,
                            Water = 5500m
                        },
                        new
                        {
                            Id = 1004,
                            Electric = 3400.55m,
                            IsActive = true,
                            MotelId = 1004,
                            Other = 1300.15m,
                            Water = 6200.1m
                        },
                        new
                        {
                            Id = 1005,
                            Electric = 3100.85m,
                            IsActive = false,
                            MotelId = 1005,
                            Other = 1400.45m,
                            Water = 5800.75m
                        },
                        new
                        {
                            Id = 1006,
                            Electric = 3600.95m,
                            IsActive = true,
                            MotelId = 1006,
                            Other = 1600.35m,
                            Water = 6100.65m
                        },
                        new
                        {
                            Id = 1007,
                            Electric = 3300.7m,
                            IsActive = true,
                            MotelId = 1007,
                            Other = 1100.8m,
                            Water = 5700.2m
                        },
                        new
                        {
                            Id = 1008,
                            Electric = 3400.3m,
                            IsActive = false,
                            MotelId = 1008,
                            Other = 1700.5m,
                            Water = 5900.4m
                        },
                        new
                        {
                            Id = 1009,
                            Electric = 3200.6m,
                            IsActive = true,
                            MotelId = 1009,
                            Other = 1800.25m,
                            Water = 5600.1m
                        },
                        new
                        {
                            Id = 1010,
                            Electric = 3500.2m,
                            IsActive = true,
                            MotelId = 1010,
                            Other = 1900.55m,
                            Water = 6000.8m
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Rental");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            MotelId = 1001,
                            Status = (byte)0,
                            TimeEnd = new DateTime(2024, 9, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(383),
                            TimeStart = new DateTime(2024, 8, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(383),
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1002,
                            MotelId = 1002,
                            Status = (byte)1,
                            TimeStart = new DateTime(2024, 9, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(388),
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1003,
                            MotelId = 1003,
                            Status = (byte)1,
                            TimeStart = new DateTime(2024, 7, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(390),
                            UserId = 1003
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Content = "Review cho MotelId 1001",
                            MotelId = 1001,
                            Rating = 3m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1002,
                            Content = "Review cho MotelId 1001",
                            MotelId = 1001,
                            Rating = 3m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1003,
                            Content = "Review cho MotelId 1001",
                            MotelId = 1001,
                            Rating = 2m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1004,
                            Content = "Review cho MotelId 1002",
                            MotelId = 1002,
                            Rating = 3m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1005,
                            Content = "Review cho MotelId 1003",
                            MotelId = 1003,
                            Rating = 4m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1006,
                            Content = "Review cho MotelId 1003",
                            MotelId = 1003,
                            Rating = 4m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1007,
                            Content = "Review cho MotelId 1003",
                            MotelId = 1003,
                            Rating = 2m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1008,
                            Content = "Review cho MotelId 1003",
                            MotelId = 1003,
                            Rating = 3m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1009,
                            Content = "Review cho MotelId 1003",
                            MotelId = 1003,
                            Rating = 1m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1010,
                            Content = "Review cho MotelId 1004",
                            MotelId = 1004,
                            Rating = 2m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1011,
                            Content = "Review cho MotelId 1004",
                            MotelId = 1004,
                            Rating = 5m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1012,
                            Content = "Review cho MotelId 1004",
                            MotelId = 1004,
                            Rating = 1m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1013,
                            Content = "Review cho MotelId 1004",
                            MotelId = 1004,
                            Rating = 1m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1014,
                            Content = "Review cho MotelId 1005",
                            MotelId = 1005,
                            Rating = 5m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1015,
                            Content = "Review cho MotelId 1006",
                            MotelId = 1006,
                            Rating = 1m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1016,
                            Content = "Review cho MotelId 1006",
                            MotelId = 1006,
                            Rating = 5m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1017,
                            Content = "Review cho MotelId 1006",
                            MotelId = 1006,
                            Rating = 3m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1018,
                            Content = "Review cho MotelId 1006",
                            MotelId = 1006,
                            Rating = 4m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1019,
                            Content = "Review cho MotelId 1007",
                            MotelId = 1007,
                            Rating = 3m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1020,
                            Content = "Review cho MotelId 1007",
                            MotelId = 1007,
                            Rating = 2m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1021,
                            Content = "Review cho MotelId 1007",
                            MotelId = 1007,
                            Rating = 1m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1022,
                            Content = "Review cho MotelId 1008",
                            MotelId = 1008,
                            Rating = 1m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1023,
                            Content = "Review cho MotelId 1008",
                            MotelId = 1008,
                            Rating = 3m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1024,
                            Content = "Review cho MotelId 1008",
                            MotelId = 1008,
                            Rating = 2m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1025,
                            Content = "Review cho MotelId 1008",
                            MotelId = 1008,
                            Rating = 1m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1026,
                            Content = "Review cho MotelId 1008",
                            MotelId = 1008,
                            Rating = 3m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1027,
                            Content = "Review cho MotelId 1009",
                            MotelId = 1009,
                            Rating = 2m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1028,
                            Content = "Review cho MotelId 1009",
                            MotelId = 1009,
                            Rating = 4m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1029,
                            Content = "Review cho MotelId 1009",
                            MotelId = 1009,
                            Rating = 3m,
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1030,
                            Content = "Review cho MotelId 1009",
                            MotelId = 1009,
                            Rating = 2m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1031,
                            Content = "Review cho MotelId 1009",
                            MotelId = 1009,
                            Rating = 5m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1032,
                            Content = "Review cho MotelId 1010",
                            MotelId = 1010,
                            Rating = 3m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1033,
                            Content = "Review cho MotelId 1010",
                            MotelId = 1010,
                            Rating = 1m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1034,
                            Content = "Review cho MotelId 1010",
                            MotelId = 1010,
                            Rating = 2m,
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1035,
                            Content = "Review cho MotelId 1010",
                            MotelId = 1010,
                            Rating = 2m,
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1036,
                            Content = "Review cho MotelId 1010",
                            MotelId = 1010,
                            Rating = 2m,
                            UserId = 1001
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,1)");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Area = 25m,
                            MotelId = 1001,
                            Price = 500000m,
                            RoomNumber = 101,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1002,
                            Area = 30m,
                            MotelId = 1002,
                            Price = 600000m,
                            RoomNumber = 102,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 1003,
                            Area = 35m,
                            MotelId = 1003,
                            Price = 700000m,
                            RoomNumber = 103,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1004,
                            Area = 40m,
                            MotelId = 1004,
                            Price = 800000m,
                            RoomNumber = 104,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1005,
                            Area = 45m,
                            MotelId = 1005,
                            Price = 900000m,
                            RoomNumber = 105,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 1006,
                            Area = 50m,
                            MotelId = 1006,
                            Price = 1000000m,
                            RoomNumber = 106,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1007,
                            Area = 55m,
                            MotelId = 1007,
                            Price = 1100000m,
                            RoomNumber = 107,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1008,
                            Area = 60m,
                            MotelId = 1008,
                            Price = 1200000m,
                            RoomNumber = 108,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 1009,
                            Area = 65m,
                            MotelId = 1009,
                            Price = 1300000m,
                            RoomNumber = 109,
                            Status = (byte)1
                        },
                        new
                        {
                            Id = 1010,
                            Area = 70m,
                            MotelId = 1010,
                            Price = 1400000m,
                            RoomNumber = 110,
                            Status = (byte)1
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("Id");

                    b.ToTable("Term");

                    b.HasData(
                        new
                        {
                            Id = 1002,
                            Link = "https://example.com/link2"
                        },
                        new
                        {
                            Id = 1001,
                            Link = "https://example.com/link3"
                        });
                });

            modelBuilder.Entity("BACK_END.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotelId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MotelId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Content = "Phòng 101 gặp vấn đề với hệ thống nước.",
                            MotelId = 1001,
                            Status = (byte)1,
                            Title = "Hệ thống nước gặp sự cố",
                            Type = "Yêu cầu sửa chữa",
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1002,
                            Content = "Khách hàng phàn nàn về dịch vụ phòng 102.",
                            MotelId = 1002,
                            Status = (byte)0,
                            Title = "Chất lượng dịch vụ kém",
                            Type = "Khiếu nại",
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1003,
                            Content = "Phòng 103 cần kiểm tra lại hệ thống điện.",
                            MotelId = 1003,
                            Status = (byte)1,
                            Title = "Kiểm tra hệ thống điện",
                            Type = "Yêu cầu bảo trì",
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1004,
                            Content = "Phòng 104 cần sửa chữa điều hòa.",
                            MotelId = 1004,
                            Status = (byte)1,
                            Title = "Sửa chữa điều hòa",
                            Type = "Yêu cầu bảo trì",
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1005,
                            Content = "Cửa phòng 105 gặp vấn đề cần sửa chữa.",
                            MotelId = 1005,
                            Status = (byte)0,
                            Title = "Cửa phòng bị hỏng",
                            Type = "Yêu cầu sửa chữa",
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1006,
                            Content = "Khách hàng phòng 106 phàn nàn về tiếng ồn từ phòng bên.",
                            MotelId = 1006,
                            Status = (byte)1,
                            Title = "Tiếng ồn từ phòng bên cạnh",
                            Type = "Khiếu nại",
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1007,
                            Content = "Giường phòng 107 bị hỏng cần sửa chữa.",
                            MotelId = 1007,
                            Status = (byte)0,
                            Title = "Sửa chữa giường",
                            Type = "Yêu cầu bảo trì",
                            UserId = 1001
                        },
                        new
                        {
                            Id = 1008,
                            Content = "Khách hàng phòng 108 khiếu nại về thái độ phục vụ của nhân viên.",
                            MotelId = 1008,
                            Status = (byte)1,
                            Title = "Nhân viên phục vụ không thân thiện",
                            Type = "Khiếu nại",
                            UserId = 1002
                        },
                        new
                        {
                            Id = 1009,
                            Content = "Phòng 109 gặp vấn đề với WiFi, cần kiểm tra.",
                            MotelId = 1009,
                            Status = (byte)0,
                            Title = "Hệ thống WiFi chập chờn",
                            Type = "Yêu cầu sửa chữa",
                            UserId = 1003
                        },
                        new
                        {
                            Id = 1010,
                            Content = "Phòng 110 không có nước nóng, cần kiểm tra.",
                            MotelId = 1010,
                            Status = (byte)1,
                            Title = "Thiếu nước nóng",
                            Type = "Khiếu nại",
                            UserId = 1001
                        });
                });

            modelBuilder.Entity("BACK_END.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Avatar = "avatar1.png",
                            Email = "vana@example.com",
                            FullName = "Nguyễn Văn A",
                            Phone = "0901234567",
                            Status = (byte)1,
                            TimeCreated = new DateTime(2024, 10, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(121)
                        },
                        new
                        {
                            Id = 1002,
                            Avatar = "avatar2.png",
                            Email = "thib@example.com",
                            FullName = "Trần Thị B",
                            Phone = "0902345678",
                            Status = (byte)1,
                            TimeCreated = new DateTime(2024, 10, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(124)
                        },
                        new
                        {
                            Id = 1003,
                            Avatar = "avatar3.png",
                            Email = "vanc@example.com",
                            FullName = "Lê Văn C",
                            Phone = "0903456789",
                            Status = (byte)1,
                            TimeCreated = new DateTime(2024, 10, 15, 17, 26, 52, 233, DateTimeKind.Local).AddTicks(125)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BACK_END.Models.Consumption", b =>
                {
                    b.HasOne("BACK_END.Models.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BACK_END.Models.Media", b =>
                {
                    b.HasOne("BACK_END.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId");

                    b.HasOne("BACK_END.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.Navigation("Image");

                    b.Navigation("Motel");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("BACK_END.Models.Motel", b =>
                {
                    b.HasOne("BACK_END.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Term");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Notification", b =>
                {
                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Price", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithOne("Price")
                        .HasForeignKey("BACK_END.Models.Price", "MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");
                });

            modelBuilder.Entity("BACK_END.Models.Rental", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Review", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany("Reviews")
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BACK_END.Models.Room", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany("Rooms")
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");
                });

            modelBuilder.Entity("BACK_END.Models.Ticket", b =>
                {
                    b.HasOne("BACK_END.Models.Motel", "Motel")
                        .WithMany()
                        .HasForeignKey("MotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BACK_END.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Motel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BACK_END.Models.Motel", b =>
                {
                    b.Navigation("Price");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
